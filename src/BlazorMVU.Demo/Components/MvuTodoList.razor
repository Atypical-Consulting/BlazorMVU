@using System.Collections.Immutable
@inherits MvuComponent<MvuTodoList.Model, MvuTodoList.Msg>

<div class="grid" style="margin-bottom: 20px">
  <input type="text" value="@State.NewTodo" placeholder="New task" @oninput="@HandleNewTodoChange"/>
  <button @onclick="@AddTodo">Add</button>
</div>

@foreach (var todo in State.Todos)
{
  <div class="grid">
    <div>
      <input type="checkbox" checked="@todo.IsDone" @onchange="@(() => ToggleDone(todo))"/>
      @todo.Description
    </div>
    <button class="secondary" @onclick="@(() => DeleteTodo(todo))">Delete</button>
  </div>
}

@code {

  // Model
  public record Model(
    ImmutableList<Todo> Todos,
    string NewTodo);

  public record Todo(
    string Description,
    bool IsDone);

  // Messages
  public abstract record Msg
  {
    public record AddTodo(string Description) : Msg;
    public record ToggleDone(Todo Todo) : Msg;
    public record DeleteTodo(Todo Todo) : Msg;
    public record NewTodoChange(string NewTodo) : Msg;
  }

  // Parameter for initial state
  [Parameter]
  public ImmutableList<Todo> Todos { get; set; }
    = ImmutableList<Todo>.Empty;

  // Initialize the model
  protected override Model Init()
    => new(Todos, "");

  // Update the model based on the message
  protected override Model Update(Msg msg, Model model)
    => msg switch
    {
      Msg.AddTodo addTodo => new Model(model.Todos.Add(new Todo(addTodo.Description, false)), ""),
      Msg.ToggleDone toggleDone => model with { Todos = model.Todos.Replace(toggleDone.Todo, toggleDone.Todo with { IsDone = !toggleDone.Todo.IsDone }) },
      Msg.DeleteTodo deleteTodo => model with { Todos = model.Todos.Remove(deleteTodo.Todo) },
      Msg.NewTodoChange newTodoChange => model with { NewTodo = newTodoChange.NewTodo },
      _ => model
    };

  // Add a new todo
  private void AddTodo()
  {
    if (!string.IsNullOrWhiteSpace(State.NewTodo))
    {
      Dispatch(new Msg.AddTodo(State.NewTodo));
    }
  }

  // Toggle the done status of a todo
  private void ToggleDone(Todo todo)
  {
    Dispatch(new Msg.ToggleDone(todo));
  }

  // Delete a todo
  private void DeleteTodo(Todo todo)
  {
    Dispatch(new Msg.DeleteTodo(todo));
  }

  // Handle the text changes and dispatch messages
  private void HandleNewTodoChange(ChangeEventArgs obj)
  {
    var name = obj.Value?.ToString() ?? "";
    var msg = new Msg.NewTodoChange(name);
    Dispatch(msg);
  }

}